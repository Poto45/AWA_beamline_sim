import h5py
import scipy.constants as const
import numpy as np
import subprocess
import os

# Location of h5 of WARPX or OpalT w/ tag
origin = 'WX' # options are OT for Opal T or WX for WarpX
file = 'openpmd_004041.h5'
tss = '4041' # if WarpX, put in terms of the last 4 numbers of openpmd file; if OpalT, put in terms of 'Step#99'
case = 'one_beam' # name of final txt file
h5loc = "C:\\Users\\cassi\\Desktop\\Research\\Githubwarpx\\dist_piot\\metis\\"

#origin = 'OT'
#file = "input.h5"
#tss = 'Step#420'
#case = 'cath2yag4'
#h5loc = "C:\\Users\\cassi\\Desktop\\Research\\ElegantOpt+bebop\\cath2yag4\\"

def to_elegant(ch, xs, ys, ts, px, py, p_nodim, filepath,filename):
    with open(filepath+filename,'w') as txt:
        print('opened')
        numrows = len(xs)
        txt.write(str(numrows)+'\n')
        for row in np.arange(len(xs)):
            txt.write(str(xs[row])+' '+str(px[row])+' '+str(ys[row])+' '+str(py[row])+' '+str(ts[row])+' '+str(p_nodim[row])+'\n')

h5_data = h5py.File(h5loc+file,'r')
if origin == 'WX':
    dat = h5_data['data']
    lst = dat[tss]
    parts = lst['particles']
    myp = parts['myparticle']
    print(myp.keys())


    charge = myp['charge']
    print(charge.keys())
    poss = myp['position']
    xs = np.array(list(poss['x'][:]))
    ys = np.array(list(poss['y'][:]))
    ts = np.array(list(poss['z'][:]/const.c))

# Elegant needs beta*gamma = p (dimensionless momentum), so needs to be changed for WX
    moms = myp['momentum']
    px = moms['x'][:]
    py = moms['y'][:]
    pz = moms['z'][:]

    p_nodim = np.sqrt(1+(px**2+py**2+pz**2)/(const.m_e**2 * const.c**2))

    px = np.array(list(px))
    py = np.array(list(py))
    p_nodim = np.array(list(p_nodim))

    to_elegant(charge,xs,ys,ts,px,py,p_nodim,h5loc,case+'.txt')
    print('finished')
if origin == 'OT':
    h5_data = h5py.File(h5loc+file, 'r')
    ts = h5_data.keys()
    ts = [int(dat[5:]) for dat in ts]
    sts = sorted(ts)
    print(sts)
    laststep = h5_data['Step#'+str(sts[-1])]
    charge = laststep['q'][:]

    xs = np.array(list(laststep['x'][:]))
    ys = np.array(list(laststep['y'][:]))
    ts = np.array(list(laststep['z'][:]/const.c))
    px = laststep['px'][:]
    py = laststep['py'][:]
    pz = laststep['pz'][:]

# I think opalt also outputs everything in beta gamma...
    p_nodim = pz #np.sqrt(1+(px**2+py**2+pz**2)/(const.m_e**2 * const.c**2))

    px = np.array(list(px))
    py = np.array(list(py))
    p_nodim = np.array(list(p_nodim))


    to_elegant(charge,xs,ys,ts,px,py,p_nodim,h5loc,case+'.txt')

    print('finished')



# Then, we also want to know the final momentum for Elegant
txtloc = h5loc+case+'.txt'
mom = []
with open(txtloc) as f:
    for line in f:
        cols = line.split()
        mom.append(cols[-1])

m_e = .511 # .511 MeV/c^2

mom = [float(i) for i in mom][1:]
#print(mom)
momavg = np.average(mom)
print(momavg)
ene = momavg*m_e
print(ene, 'MeV/c')create